{"ast":null,"code":"import { memo, notUndefined, approxEqual } from \"./utils.js\";\nconst defaultKeyExtractor = index => index;\nconst defaultRangeExtractor = range => {\n  const start = Math.max(range.startIndex - range.overscan, 0);\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1);\n  const arr = [];\n  for (let i = start; i <= end; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\nconst observeElementRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = rect => {\n    const {\n      width,\n      height\n    } = rect;\n    cb({\n      width: Math.round(width),\n      height: Math.round(height)\n    });\n  };\n  handler(element.getBoundingClientRect());\n  if (typeof ResizeObserver === \"undefined\") {\n    return () => {};\n  }\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    if (entry == null ? void 0 : entry.borderBoxSize) {\n      const box = entry.borderBoxSize[0];\n      if (box) {\n        handler({\n          width: box.inlineSize,\n          height: box.blockSize\n        });\n        return;\n      }\n    }\n    handler(element.getBoundingClientRect());\n  });\n  observer.observe(element, {\n    box: \"border-box\"\n  });\n  return () => {\n    observer.unobserve(element);\n  };\n};\nconst observeWindowRect = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = () => {\n    cb({\n      width: element.innerWidth,\n      height: element.innerHeight\n    });\n  };\n  handler();\n  element.addEventListener(\"resize\", handler, {\n    passive: true\n  });\n  return () => {\n    element.removeEventListener(\"resize\", handler);\n  };\n};\nconst observeElementOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = () => {\n    cb(element[instance.options.horizontal ? \"scrollLeft\" : \"scrollTop\"]);\n  };\n  handler();\n  element.addEventListener(\"scroll\", handler, {\n    passive: true\n  });\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n  };\n};\nconst observeWindowOffset = (instance, cb) => {\n  const element = instance.scrollElement;\n  if (!element) {\n    return;\n  }\n  const handler = () => {\n    cb(element[instance.options.horizontal ? \"scrollX\" : \"scrollY\"]);\n  };\n  handler();\n  element.addEventListener(\"scroll\", handler, {\n    passive: true\n  });\n  return () => {\n    element.removeEventListener(\"scroll\", handler);\n  };\n};\nconst measureElement = (element, entry, instance) => {\n  if (entry == null ? void 0 : entry.borderBoxSize) {\n    const box = entry.borderBoxSize[0];\n    if (box) {\n      const size = Math.round(box[instance.options.horizontal ? \"inlineSize\" : \"blockSize\"]);\n      return size;\n    }\n  }\n  return Math.round(element.getBoundingClientRect()[instance.options.horizontal ? \"width\" : \"height\"]);\n};\nconst windowScroll = (offset, {\n  adjustments = 0,\n  behavior\n}, instance) => {\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nconst elementScroll = (offset, {\n  adjustments = 0,\n  behavior\n}, instance) => {\n  var _a, _b;\n  const toOffset = offset + adjustments;\n  (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n    [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n    behavior\n  });\n};\nclass Virtualizer {\n  constructor(opts) {\n    this.unsubs = [];\n    this.scrollElement = null;\n    this.isScrolling = false;\n    this.isScrollingTimeoutId = null;\n    this.scrollToIndexTimeoutId = null;\n    this.measurementsCache = [];\n    this.itemSizeCache = /* @__PURE__ */new Map();\n    this.pendingMeasuredCacheIndexes = [];\n    this.scrollDirection = null;\n    this.scrollAdjustments = 0;\n    this.measureElementCache = /* @__PURE__ */new Map();\n    this.observer = /* @__PURE__ */(() => {\n      let _ro = null;\n      const get = () => {\n        if (_ro) {\n          return _ro;\n        } else if (typeof ResizeObserver !== \"undefined\") {\n          return _ro = new ResizeObserver(entries => {\n            entries.forEach(entry => {\n              this._measureElement(entry.target, entry);\n            });\n          });\n        } else {\n          return null;\n        }\n      };\n      return {\n        disconnect: () => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.disconnect();\n        },\n        observe: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.observe(target, {\n            box: \"border-box\"\n          });\n        },\n        unobserve: target => {\n          var _a;\n          return (_a = get()) == null ? void 0 : _a.unobserve(target);\n        }\n      };\n    })();\n    this.range = null;\n    this.setOptions = opts2 => {\n      Object.entries(opts2).forEach(([key, value]) => {\n        if (typeof value === \"undefined\") delete opts2[key];\n      });\n      this.options = {\n        debug: false,\n        initialOffset: 0,\n        overscan: 1,\n        paddingStart: 0,\n        paddingEnd: 0,\n        scrollPaddingStart: 0,\n        scrollPaddingEnd: 0,\n        horizontal: false,\n        getItemKey: defaultKeyExtractor,\n        rangeExtractor: defaultRangeExtractor,\n        onChange: () => {},\n        measureElement,\n        initialRect: {\n          width: 0,\n          height: 0\n        },\n        scrollMargin: 0,\n        scrollingDelay: 150,\n        indexAttribute: \"data-index\",\n        initialMeasurementsCache: [],\n        lanes: 1,\n        ...opts2\n      };\n    };\n    this.notify = sync => {\n      var _a, _b;\n      (_b = (_a = this.options).onChange) == null ? void 0 : _b.call(_a, this, sync);\n    };\n    this.maybeNotify = memo(() => {\n      this.calculateRange();\n      return [this.isScrolling, this.range ? this.range.startIndex : null, this.range ? this.range.endIndex : null];\n    }, isScrolling => {\n      this.notify(isScrolling);\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"maybeNotify\",\n      debug: () => this.options.debug,\n      initialDeps: [this.isScrolling, this.range ? this.range.startIndex : null, this.range ? this.range.endIndex : null]\n    });\n    this.cleanup = () => {\n      this.unsubs.filter(Boolean).forEach(d => d());\n      this.unsubs = [];\n      this.scrollElement = null;\n    };\n    this._didMount = () => {\n      this.measureElementCache.forEach(this.observer.observe);\n      return () => {\n        this.observer.disconnect();\n        this.cleanup();\n      };\n    };\n    this._willUpdate = () => {\n      const scrollElement = this.options.getScrollElement();\n      if (this.scrollElement !== scrollElement) {\n        this.cleanup();\n        this.scrollElement = scrollElement;\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: void 0,\n          behavior: void 0\n        });\n        this.unsubs.push(this.options.observeElementRect(this, rect => {\n          this.scrollRect = rect;\n          this.maybeNotify();\n        }));\n        this.unsubs.push(this.options.observeElementOffset(this, offset => {\n          this.scrollAdjustments = 0;\n          if (this.scrollOffset === offset) {\n            return;\n          }\n          if (this.isScrollingTimeoutId !== null) {\n            clearTimeout(this.isScrollingTimeoutId);\n            this.isScrollingTimeoutId = null;\n          }\n          this.isScrolling = true;\n          this.scrollDirection = this.scrollOffset < offset ? \"forward\" : \"backward\";\n          this.scrollOffset = offset;\n          this.maybeNotify();\n          this.isScrollingTimeoutId = setTimeout(() => {\n            this.isScrollingTimeoutId = null;\n            this.isScrolling = false;\n            this.scrollDirection = null;\n            this.maybeNotify();\n          }, this.options.scrollingDelay);\n        }));\n      }\n    };\n    this.getSize = () => {\n      return this.scrollRect[this.options.horizontal ? \"width\" : \"height\"];\n    };\n    this.memoOptions = memo(() => [this.options.count, this.options.paddingStart, this.options.scrollMargin, this.options.getItemKey], (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = [];\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey\n      };\n    }, {\n      key: false\n    });\n    this.getFurthestMeasurement = (measurements, index) => {\n      const furthestMeasurementsFound = /* @__PURE__ */new Map();\n      const furthestMeasurements = /* @__PURE__ */new Map();\n      for (let m = index - 1; m >= 0; m--) {\n        const measurement = measurements[m];\n        if (furthestMeasurementsFound.has(measurement.lane)) {\n          continue;\n        }\n        const previousFurthestMeasurement = furthestMeasurements.get(measurement.lane);\n        if (previousFurthestMeasurement == null || measurement.end > previousFurthestMeasurement.end) {\n          furthestMeasurements.set(measurement.lane, measurement);\n        } else if (measurement.end < previousFurthestMeasurement.end) {\n          furthestMeasurementsFound.set(measurement.lane, true);\n        }\n        if (furthestMeasurementsFound.size === this.options.lanes) {\n          break;\n        }\n      }\n      return furthestMeasurements.size === this.options.lanes ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n        if (a.end === b.end) {\n          return a.index - b.index;\n        }\n        return a.end - b.end;\n      })[0] : void 0;\n    };\n    this.getMeasurements = memo(() => [this.memoOptions(), this.itemSizeCache], ({\n      count,\n      paddingStart,\n      scrollMargin,\n      getItemKey\n    }, itemSizeCache) => {\n      const min = this.pendingMeasuredCacheIndexes.length > 0 ? Math.min(...this.pendingMeasuredCacheIndexes) : 0;\n      this.pendingMeasuredCacheIndexes = [];\n      const measurements = this.measurementsCache.slice(0, min);\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i);\n        const furthestMeasurement = this.options.lanes === 1 ? measurements[i - 1] : this.getFurthestMeasurement(measurements, i);\n        const start = furthestMeasurement ? furthestMeasurement.end : paddingStart + scrollMargin;\n        const measuredSize = itemSizeCache.get(key);\n        const size = typeof measuredSize === \"number\" ? measuredSize : this.options.estimateSize(i);\n        const end = start + size;\n        const lane = furthestMeasurement ? furthestMeasurement.lane : i % this.options.lanes;\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane\n        };\n      }\n      this.measurementsCache = measurements;\n      return measurements;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getMeasurements\",\n      debug: () => this.options.debug\n    });\n    this.calculateRange = memo(() => [this.getMeasurements(), this.getSize(), this.scrollOffset], (measurements, outerSize, scrollOffset) => {\n      return this.range = measurements.length > 0 && outerSize > 0 ? calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset\n      }) : null;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"calculateRange\",\n      debug: () => this.options.debug\n    });\n    this.getIndexes = memo(() => [this.options.rangeExtractor, this.calculateRange(), this.options.overscan, this.options.count], (rangeExtractor, range, overscan, count) => {\n      return range === null ? [] : rangeExtractor({\n        ...range,\n        overscan,\n        count\n      });\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getIndexes\",\n      debug: () => this.options.debug\n    });\n    this.indexFromElement = node => {\n      const attributeName = this.options.indexAttribute;\n      const indexStr = node.getAttribute(attributeName);\n      if (!indexStr) {\n        console.warn(`Missing attribute name '${attributeName}={index}' on measured element.`);\n        return -1;\n      }\n      return parseInt(indexStr, 10);\n    };\n    this._measureElement = (node, entry) => {\n      const item = this.measurementsCache[this.indexFromElement(node)];\n      if (!item || !node.isConnected) {\n        this.measureElementCache.forEach((cached, key) => {\n          if (cached === node) {\n            this.observer.unobserve(node);\n            this.measureElementCache.delete(key);\n          }\n        });\n        return;\n      }\n      const prevNode = this.measureElementCache.get(item.key);\n      if (prevNode !== node) {\n        if (prevNode) {\n          this.observer.unobserve(prevNode);\n        }\n        this.observer.observe(node);\n        this.measureElementCache.set(item.key, node);\n      }\n      const measuredItemSize = this.options.measureElement(node, entry, this);\n      this.resizeItem(item, measuredItemSize);\n    };\n    this.resizeItem = (item, size) => {\n      const itemSize = this.itemSizeCache.get(item.key) ?? item.size;\n      const delta = size - itemSize;\n      if (delta !== 0) {\n        if (item.start < this.scrollOffset + this.scrollAdjustments) {\n          if (process.env.NODE_ENV !== \"production\" && this.options.debug) {\n            console.info(\"correction\", delta);\n          }\n          this._scrollToOffset(this.scrollOffset, {\n            adjustments: this.scrollAdjustments += delta,\n            behavior: void 0\n          });\n        }\n        this.pendingMeasuredCacheIndexes.push(item.index);\n        this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size));\n        this.notify(false);\n      }\n    };\n    this.measureElement = node => {\n      if (!node) {\n        return;\n      }\n      this._measureElement(node, void 0);\n    };\n    this.getVirtualItems = memo(() => [this.getIndexes(), this.getMeasurements()], (indexes, measurements) => {\n      const virtualItems = [];\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k];\n        const measurement = measurements[i];\n        virtualItems.push(measurement);\n      }\n      return virtualItems;\n    }, {\n      key: process.env.NODE_ENV !== \"production\" && \"getIndexes\",\n      debug: () => this.options.debug\n    });\n    this.getVirtualItemForOffset = offset => {\n      const measurements = this.getMeasurements();\n      return notUndefined(measurements[findNearestBinarySearch(0, measurements.length - 1, index => notUndefined(measurements[index]).start, offset)]);\n    };\n    this.getOffsetForAlignment = (toOffset, align) => {\n      const size = this.getSize();\n      if (align === \"auto\") {\n        if (toOffset <= this.scrollOffset) {\n          align = \"start\";\n        } else if (toOffset >= this.scrollOffset + size) {\n          align = \"end\";\n        } else {\n          align = \"start\";\n        }\n      }\n      if (align === \"start\") {\n        toOffset = toOffset;\n      } else if (align === \"end\") {\n        toOffset = toOffset - size;\n      } else if (align === \"center\") {\n        toOffset = toOffset - size / 2;\n      }\n      const scrollSizeProp = this.options.horizontal ? \"scrollWidth\" : \"scrollHeight\";\n      const scrollSize = this.scrollElement ? \"document\" in this.scrollElement ? this.scrollElement.document.documentElement[scrollSizeProp] : this.scrollElement[scrollSizeProp] : 0;\n      const maxOffset = scrollSize - this.getSize();\n      return Math.max(Math.min(maxOffset, toOffset), 0);\n    };\n    this.getOffsetForIndex = (index, align = \"auto\") => {\n      index = Math.max(0, Math.min(index, this.options.count - 1));\n      const measurement = notUndefined(this.getMeasurements()[index]);\n      if (align === \"auto\") {\n        if (measurement.end >= this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd) {\n          align = \"end\";\n        } else if (measurement.start <= this.scrollOffset + this.options.scrollPaddingStart) {\n          align = \"start\";\n        } else {\n          return [this.scrollOffset, align];\n        }\n      }\n      const toOffset = align === \"end\" ? measurement.end + this.options.scrollPaddingEnd : measurement.start - this.options.scrollPaddingStart;\n      return [this.getOffsetForAlignment(toOffset, align), align];\n    };\n    this.isDynamicMode = () => this.measureElementCache.size > 0;\n    this.cancelScrollToIndex = () => {\n      if (this.scrollToIndexTimeoutId !== null) {\n        clearTimeout(this.scrollToIndexTimeoutId);\n        this.scrollToIndexTimeoutId = null;\n      }\n    };\n    this.scrollToOffset = (toOffset, {\n      align = \"start\",\n      behavior\n    } = {}) => {\n      this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.scrollToIndex = (index, {\n      align: initialAlign = \"auto\",\n      behavior\n    } = {}) => {\n      index = Math.max(0, Math.min(index, this.options.count - 1));\n      this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      const [toOffset, align] = this.getOffsetForIndex(index, initialAlign);\n      this._scrollToOffset(toOffset, {\n        adjustments: void 0,\n        behavior\n      });\n      if (behavior !== \"smooth\" && this.isDynamicMode()) {\n        this.scrollToIndexTimeoutId = setTimeout(() => {\n          this.scrollToIndexTimeoutId = null;\n          const elementInDOM = this.measureElementCache.has(this.options.getItemKey(index));\n          if (elementInDOM) {\n            const [toOffset2] = this.getOffsetForIndex(index, align);\n            if (!approxEqual(toOffset2, this.scrollOffset)) {\n              this.scrollToIndex(index, {\n                align,\n                behavior\n              });\n            }\n          } else {\n            this.scrollToIndex(index, {\n              align,\n              behavior\n            });\n          }\n        });\n      }\n    };\n    this.scrollBy = (delta, {\n      behavior\n    } = {}) => {\n      this.cancelScrollToIndex();\n      if (behavior === \"smooth\" && this.isDynamicMode()) {\n        console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n      }\n      this._scrollToOffset(this.scrollOffset + delta, {\n        adjustments: void 0,\n        behavior\n      });\n    };\n    this.getTotalSize = () => {\n      var _a;\n      const measurements = this.getMeasurements();\n      let end;\n      if (measurements.length === 0) {\n        end = this.options.paddingStart;\n      } else {\n        end = this.options.lanes === 1 ? ((_a = measurements[measurements.length - 1]) == null ? void 0 : _a.end) ?? 0 : Math.max(...measurements.slice(-this.options.lanes).map(m => m.end));\n      }\n      return end - this.options.scrollMargin + this.options.paddingEnd;\n    };\n    this._scrollToOffset = (offset, {\n      adjustments,\n      behavior\n    }) => {\n      this.options.scrollToFn(offset, {\n        behavior,\n        adjustments\n      }, this);\n    };\n    this.measure = () => {\n      this.itemSizeCache = /* @__PURE__ */new Map();\n      this.notify(false);\n    };\n    this.setOptions(opts);\n    this.scrollRect = this.options.initialRect;\n    this.scrollOffset = this.options.initialOffset;\n    this.measurementsCache = this.options.initialMeasurementsCache;\n    this.measurementsCache.forEach(item => {\n      this.itemSizeCache.set(item.key, item.size);\n    });\n    this.maybeNotify();\n  }\n}\nconst findNearestBinarySearch = (low, high, getCurrentValue, value) => {\n  while (low <= high) {\n    const middle = (low + high) / 2 | 0;\n    const currentValue = getCurrentValue(middle);\n    if (currentValue < value) {\n      low = middle + 1;\n    } else if (currentValue > value) {\n      high = middle - 1;\n    } else {\n      return middle;\n    }\n  }\n  if (low > 0) {\n    return low - 1;\n  } else {\n    return 0;\n  }\n};\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset\n}) {\n  const count = measurements.length - 1;\n  const getOffset = index => measurements[index].start;\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset);\n  let endIndex = startIndex;\n  while (endIndex < count && measurements[endIndex].end < scrollOffset + outerSize) {\n    endIndex++;\n  }\n  return {\n    startIndex,\n    endIndex\n  };\n}\nexport { Virtualizer, approxEqual, defaultKeyExtractor, defaultRangeExtractor, elementScroll, measureElement, memo, notUndefined, observeElementOffset, observeElementRect, observeWindowOffset, observeWindowRect, windowScroll };","map":{"version":3,"names":["defaultKeyExtractor","index","defaultRangeExtractor","range","start","Math","max","startIndex","overscan","end","min","endIndex","count","arr","i","push","observeElementRect","instance","cb","element","scrollElement","handler","rect","width","height","round","getBoundingClientRect","ResizeObserver","observer","entries","entry","borderBoxSize","box","inlineSize","blockSize","observe","unobserve","observeWindowRect","innerWidth","innerHeight","addEventListener","passive","removeEventListener","observeElementOffset","options","horizontal","observeWindowOffset","measureElement","size","windowScroll","offset","adjustments","behavior","toOffset","_b","_a","scrollTo","call","elementScroll","Virtualizer","constructor","opts","unsubs","isScrolling","isScrollingTimeoutId","scrollToIndexTimeoutId","measurementsCache","itemSizeCache","Map","pendingMeasuredCacheIndexes","scrollDirection","scrollAdjustments","measureElementCache","_ro","get","forEach","_measureElement","target","disconnect","setOptions","opts2","Object","key","value","debug","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","rangeExtractor","onChange","initialRect","scrollMargin","scrollingDelay","indexAttribute","initialMeasurementsCache","lanes","notify","sync","maybeNotify","memo","calculateRange","process","env","NODE_ENV","initialDeps","cleanup","filter","Boolean","d","_didMount","_willUpdate","getScrollElement","_scrollToOffset","scrollOffset","scrollRect","clearTimeout","setTimeout","getSize","memoOptions","getFurthestMeasurement","measurements","furthestMeasurementsFound","furthestMeasurements","m","measurement","has","lane","previousFurthestMeasurement","set","Array","from","values","sort","a","b","getMeasurements","length","slice","furthestMeasurement","measuredSize","estimateSize","outerSize","getIndexes","indexFromElement","node","attributeName","indexStr","getAttribute","console","warn","parseInt","item","isConnected","cached","delete","prevNode","measuredItemSize","resizeItem","itemSize","delta","info","getVirtualItems","indexes","virtualItems","k","len","getVirtualItemForOffset","notUndefined","findNearestBinarySearch","getOffsetForAlignment","align","scrollSizeProp","scrollSize","document","documentElement","maxOffset","getOffsetForIndex","isDynamicMode","cancelScrollToIndex","scrollToOffset","scrollToIndex","initialAlign","elementInDOM","toOffset2","approxEqual","scrollBy","getTotalSize","map","scrollToFn","measure","low","high","getCurrentValue","middle","currentValue","getOffset"],"sources":["/Users/liamfennell/Desktop/Spring 2024/SWE/Project/client/node_modules/@tanstack/virtual-core/src/index.ts"],"sourcesContent":["import { approxEqual, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\ninterface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  if (typeof ResizeObserver === 'undefined') {\n    return () => {}\n  }\n\n  const observer = new ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollX' : 'scrollY'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    sync: boolean,\n  ) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  scrollingDelay?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: VirtualItem[]\n  lanes?: number\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  isScrolling: boolean = false\n  private isScrollingTimeoutId: ReturnType<typeof setTimeout> | null = null\n  private scrollToIndexTimeoutId: ReturnType<typeof setTimeout> | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: number[] = []\n  scrollRect: Rect\n  scrollOffset: number\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments: number = 0\n  measureElementCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      } else if (typeof ResizeObserver !== 'undefined') {\n        return (_ro = new ResizeObserver((entries) => {\n          entries.forEach((entry) => {\n            this._measureElement(entry.target as TItemElement, entry)\n          })\n        }))\n      } else {\n        return null\n      }\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } | null = null\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset = this.options.initialOffset\n    this.measurementsCache = this.options.initialMeasurementsCache\n    this.measurementsCache.forEach((item) => {\n      this.itemSizeCache.set(item.key, item.size)\n    })\n\n    this.maybeNotify()\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      scrollingDelay: 150,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      ...opts,\n    }\n  }\n\n  private notify = (sync: boolean) => {\n    this.options.onChange?.(this, sync)\n  }\n\n  private maybeNotify = memo(\n    () => {\n      this.calculateRange()\n\n      return [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ]\n    },\n    (isScrolling) => {\n      this.notify(isScrolling)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'maybeNotify',\n      debug: () => this.options.debug,\n      initialDeps: [\n        this.isScrolling,\n        this.range ? this.range.startIndex : null,\n        this.range ? this.range.endIndex : null,\n      ] as [boolean, number | null, number | null],\n    },\n  )\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    this.measureElementCache.forEach(this.observer.observe)\n    return () => {\n      this.observer.disconnect()\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.maybeNotify()\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          this.scrollAdjustments = 0\n\n          if (this.scrollOffset === offset) {\n            return\n          }\n\n          if (this.isScrollingTimeoutId !== null) {\n            clearTimeout(this.isScrollingTimeoutId)\n            this.isScrollingTimeoutId = null\n          }\n\n          this.isScrolling = true\n          this.scrollDirection =\n            this.scrollOffset < offset ? 'forward' : 'backward'\n          this.scrollOffset = offset\n\n          this.maybeNotify()\n\n          this.isScrollingTimeoutId = setTimeout(() => {\n            this.isScrollingTimeoutId = null\n            this.isScrolling = false\n            this.scrollDirection = null\n\n            this.maybeNotify()\n          }, this.options.scrollingDelay)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private memoOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getFurthestMeasurement = (\n    measurements: VirtualItem[],\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n          if (a.end === b.end) {\n            return a.index - b.index\n          }\n\n          return a.end - b.end\n        })[0]\n      : undefined\n  }\n\n  private getMeasurements = memo(\n    () => [this.memoOptions(), this.itemSizeCache],\n    ({ count, paddingStart, scrollMargin, getItemKey }, itemSizeCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range =\n        measurements.length > 0 && outerSize > 0\n          ? calculateRange({\n              measurements,\n              outerSize,\n              scrollOffset,\n            })\n          : null)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return range === null\n        ? []\n        : rangeExtractor({\n            ...range,\n            overscan,\n            count,\n          })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const item = this.measurementsCache[this.indexFromElement(node)]\n\n    if (!item || !node.isConnected) {\n      this.measureElementCache.forEach((cached, key) => {\n        if (cached === node) {\n          this.observer.unobserve(node)\n          this.measureElementCache.delete(key)\n        }\n      })\n      return\n    }\n\n    const prevNode = this.measureElementCache.get(item.key)\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.measureElementCache.set(item.key, node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, entry, this)\n\n    this.resizeItem(item, measuredItemSize)\n  }\n\n  resizeItem = (item: VirtualItem, size: number) => {\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n    const delta = size - itemSize\n\n    if (delta !== 0) {\n      if (item.start < this.scrollOffset + this.scrollAdjustments) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(item.index)\n      this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size))\n\n      this.notify(false)\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= this.scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= this.scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - this.getSize()\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const measurement = notUndefined(this.getMeasurements()[index])\n\n    if (align === 'auto') {\n      if (\n        measurement.end >=\n        this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd\n      ) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        this.scrollOffset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return [this.scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.measureElementCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null) {\n      clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const [toOffset, align] = this.getOffsetForIndex(index, initialAlign)\n\n    this._scrollToOffset(toOffset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode()) {\n      this.scrollToIndexTimeoutId = setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.measureElementCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [toOffset] = this.getOffsetForIndex(index, align)\n\n          if (!approxEqual(toOffset, this.scrollOffset)) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.scrollOffset + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () => {\n    const measurements = this.getMeasurements()\n\n    let end: number\n    // If there are no measurements, set the end to paddingStart\n    if (measurements.length === 0) {\n      end = this.options.paddingStart\n    } else {\n      // If lanes is 1, use the last measurement's end, otherwise find the maximum end value among all measurements\n      end =\n        this.options.lanes === 1\n          ? measurements[measurements.length - 1]?.end ?? 0\n          : Math.max(\n              ...measurements.slice(-this.options.lanes).map((m) => m.end),\n            )\n    }\n\n    return end - this.options.scrollMargin + this.options.paddingEnd\n  }\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.notify(false)\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}